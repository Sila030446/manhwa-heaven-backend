// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id         Int      @id @default(autoincrement())
  url        String
  isComplete Boolean  @default(false)
  status     String   @default("active")
  jobType    Json
  createdAt  DateTime @default(now())
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String?
  image    String?

  emailVerified DateTime?
  readingLists  ReadingList[]
  comments      Comment[]
  ratings       Rating[]
  Account       Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model ReadingList {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  mangaManhwas MangaManhwa[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Comment {
  id   Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])

  userId        Int
  mangaManhwa   MangaManhwa? @relation(fields: [mangaManhwaId], references: [id])
  mangaManhwaId Int?
  chapter       Chapter?     @relation(fields: [chapterId], references: [id])
  chapterId     Int?
  content       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Rating {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  mangaManhwa   MangaManhwa @relation(fields: [mangaManhwaId], references: [id])
  mangaManhwaId Int
  score         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model MangaManhwa {
  id               Int           @id @default(autoincrement())
  title            String
  alternativeTitle String?
  slug             String        @unique
  description      String?
  coverImageUrl    String?
  releaseDate      DateTime?
  authors          Author[]
  genres           Genre[]
  serialization    String?
  type             Types[]
  status           String        @default("ONGOING")
  chapters         Chapter[]
  readingLists     ReadingList[]
  comments         Comment[]
  ratings          Rating[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Author {
  id           Int           @id @default(autoincrement())
  name         String
  slug         String        @unique
  mangaManhwas MangaManhwa[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Genre {
  id           Int           @id @default(autoincrement())
  name         String
  slug         String        @unique
  mangaManhwas MangaManhwa[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Types {
  id           Int           @id @default(autoincrement())
  name         String
  slug         String        @unique
  mangaManhwas MangaManhwa[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Chapter {
  id            Int         @id @default(autoincrement())
  mangaManhwa   MangaManhwa @relation(fields: [mangaManhwaId], references: [id], onDelete: Cascade)
  mangaManhwaId Int
  chapterNumber Int
  urlScrape     String?
  title         String?
  slug          String      @unique
  releaseDate   DateTime?
  pages         Page[]
  comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Page {
  id         Int      @id @default(autoincrement())
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId  Int
  pageNumber Int
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
